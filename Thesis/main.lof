\babel@toc {american}{}\relax 
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces Neural network consisting of only one perceptron. The output is computed according to Equation \ref {eq:perceptron}.\relax }}{4}{figure.caption.4}%
\contentsline {figure}{\numberline {2.2}{\ignorespaces Neural network consisting of two hidden layers. The connections between the perceptrons are bidirectional. In the forward phase, the intermediate results are given to the neurons to the right and in the backward phase from right to left. \relax }}{5}{figure.caption.5}%
\contentsline {figure}{\numberline {2.3}{\ignorespaces Comparison of grid search (left) and random search (right) in the two dimensional case. For both techniques, 9 different combinations are evaluated. In the left case, only 3 distinct values for each hyperparameter are set whereas there are 9 different values for each parameter in the random search. Taken from \blx@tocontentsinit {0}\cite {feurer2019hyperparameter}. \relax }}{8}{figure.caption.6}%
\contentsline {figure}{\numberline {2.4}{\ignorespaces Schematic iteration steps of the bayesian optimization. The maximum of the acquisition function determines the next function evaluation (red dot in the middle). The goal is to find the minimum of the dashed line. The blue band is the uncertainty of the function. Taken from \blx@tocontentsinit {0}\cite {feurer2019hyperparameter}. \relax }}{11}{figure.caption.7}%
\contentsline {figure}{\numberline {2.5}{\ignorespaces Interpolation of the function $ f $ (black line) by its interpolant $ u $ (red, dashed) in the nodal basis. Level of the grid is 3 and hat functions are used. Taken from \blx@tocontentsinit {0}\cite {pfluger2010spatially}. \relax }}{13}{figure.caption.8}%
\contentsline {figure}{\numberline {2.6}{\ignorespaces Hierarchical subspaces up to level 3 on the left. On the right, nodal spaces up to level 3. The combination of $ W_1 $ up to $ W_3 $ is the same space as $ V_3 $. Taken from \blx@tocontentsinit {0}\cite {pfluger2010spatially}. \relax }}{14}{figure.caption.9}%
\contentsline {figure}{\numberline {2.7}{\ignorespaces Interpolation of the function $ f $ (black line) by its interpolant $ u $ (red, dashed) in the hierarchical basis. Level of the grid is 3 and hat functions are used. Taken from \blx@tocontentsinit {0}\cite {pfluger2010spatially}.\relax }}{15}{figure.caption.10}%
\contentsline {figure}{\numberline {2.8}{\ignorespaces Example of a basis function in two dimensions. It is constructed with the tensor product of two 1d hat functions. Taken from \blx@tocontentsinit {0}\cite {garcke2013sparse}. \relax }}{16}{figure.caption.11}%
\contentsline {figure}{\numberline {2.9}{\ignorespaces Two dimensional example of a sparse grid with $ n = 3 $. Left, the subspaces $ W_{\vec {l}} $ can be seen and on the right is the resulting sparse grid. Taken from \blx@tocontentsinit {0}\cite {garcke2013sparse}. \relax }}{17}{figure.caption.12}%
\contentsline {figure}{\numberline {2.10}{\ignorespaces Example of the 2-dimensional combination technique. Here the blue regular grids are added and the red ones are subtracted. On the left, the normal combination technique can be seen and on the right is an dimension-adaptive version. Taken from \blx@tocontentsinit {0}\cite {pfluger2010spatially}. \relax }}{18}{figure.caption.13}%
\contentsline {figure}{\numberline {2.11}{\ignorespaces Example of the spatially adaptive combination technique in two dimensions. Taken from \blx@tocontentsinit {0}\cite {obersteiner2021generalized}. \relax }}{19}{figure.caption.15}%
\contentsline {figure}{\numberline {2.12}{\ignorespaces HPC of level $ k = 5 $ (red stars) and full grid (black dots). A full grid would have $ 33^2 = 1089 $ and this grid has $ 147 $ points. Taken from \blx@tocontentsinit {0}\cite {duan2016induction}.\relax }}{23}{figure.caption.36}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces Test functions used for evaluating the sparse grid optimization. Each one is plotted with 200 samples in each dimension. Note that the function values of the Rosenbrock function are transformed with $ log_{10}(f(x)) $ for better visualization.\relax }}{29}{figure.caption.38}%
\contentsline {figure}{\numberline {3.2}{\ignorespaces Sparse grid generation depending on the adaptivity parameter $ \gamma $ for the Eggholder function. In all cases, the same number of grid points is used. Here, in each of the 249 iterations, 4 new grid points are added resulting in a overall number of 997 function evaluations.\relax }}{30}{figure.caption.39}%
\contentsline {figure}{\numberline {3.3}{\ignorespaces Sparse grid generation depending on the adaptivity parameter $ \gamma $ for the Rosenbrock function. In all cases, the same number of grid points is used. Here, in each of the 249 iterations, 4 new grid points are added resulting in a overall number of 997 function evaluations.\relax }}{31}{figure.caption.40}%
\contentsline {figure}{\numberline {3.4}{\ignorespaces Sparse grid generation depending on the adaptivity parameter $ \gamma $ for the Rastrigin function. In all cases, the same number of grid points is used. Here, in each of the 249 iterations, 4 new grid points are added resulting in a overall number of 997 function evaluations.\relax }}{32}{figure.caption.41}%
\contentsline {figure}{\numberline {3.5}{\ignorespaces Influence of the adaptivity parameter on the error (difference to the actual optimal value) of the optimum found by the sparse grid. \relax }}{34}{figure.caption.42}%
\contentsline {figure}{\numberline {3.6}{\ignorespaces Optimization error for different algorithms depending on the number of grid points in two dimensions. The plots show the results with degree 2 (top left), degree 3 (top right) and degree 5 (bottom). The Rastrigin function was used. \relax }}{36}{figure.caption.43}%
\contentsline {figure}{\numberline {3.7}{\ignorespaces Resulting optimal points from local (red points) and global (black points) optimization algorithm. In the background, the contour of the interpolated function is depicted with the corresponding sparse grid points in white. The left one has 5 grid points, the one in the center 77, and the right one 997. The degree of the B-splines on the sparse grid is 2. \relax }}{37}{figure.caption.44}%
\contentsline {figure}{\numberline {3.8}{\ignorespaces Error of the optimization depending on the number of grid points used for different dimensions of the Rastrigini function. \relax }}{38}{figure.caption.46}%
\contentsline {figure}{\numberline {3.9}{\ignorespaces 2-layer (with 30 neurons each) fully connected network evaluation on the diamonds dataset depending on the number of epochs and learning rate of the Adam optimizer. The result is plotted with $ log_{10}(\text {Result}) $ for better visualization. \relax }}{40}{figure.caption.47}%
\contentsline {figure}{\numberline {3.10}{\ignorespaces Analysis of sparse grid with machine learning evaluation for different adaptivity parameters ($ 0.85 $ \ref {fig:analysis_sparse_grid_with_machine_learning_085} and $ 0.5 $ \ref {fig:analysis_sparse_grid_with_machine_learning_05}), each with 29 and 77 grid points.\relax }}{41}{figure.caption.48}%
\contentsline {figure}{\numberline {3.11}{\ignorespaces Optimization steps of gradient descent algorithm for 5 (top left), 9 (top right), 29 (bottom left) and 49 (bottom right) grid points. In the background of each plot, the contour of the interpolated function is shown. The function evaluated is the same as depicted in Figure \ref {fig:analysis_model_training}. \relax }}{43}{figure.caption.50}%
\contentsline {figure}{\numberline {3.12}{\ignorespaces Comparison of optimization algorithms on the sparse grid with increasing number of grid points in two and three dimensions. Epochs, learning rate, and the batch size of a two-layer neural network on the diamonds dataset for regression are optimized. Result is the mean absolute percentage error. \relax }}{45}{figure.caption.52}%
\contentsline {figure}{\numberline {3.13}{\ignorespaces Sparse grid optimization with the interpolated function in the background, the white grid points, and the optimizer steps in red. Four different budgets are used (30: top left, 50: top right, 100: bottom left, 200: bottom right. Only three different configurations with values for batch size from $ {100, 400, 2000} $ and values for epochs from $ {1, 5, 13} $. \relax }}{47}{figure.caption.53}%
\contentsline {figure}{\numberline {3.14}{\ignorespaces Comparison of grid-, random search, bayesian optimization and sparse grid search for the datasets shown in Table \ref {tab:datasets_first_experiment}. Two hyperparameters, epochs and learning rate of the neural network's optimizer, were optimized. \relax }}{50}{figure.caption.55}%
\contentsline {figure}{\numberline {3.15}{\ignorespaces Comparison of the grids generated for the house\_sales dataset. The best configuration found $ x_{opt} $ is marked with a white cross.\relax }}{52}{figure.caption.56}%
\contentsline {figure}{\numberline {3.16}{\ignorespaces Comparison of grid search, random search, bayesian optimization and sparse grid search. The model optimized consists of two layers with 40 neurons each. The number of epochs, batch size, and learning rate are optimized. \relax }}{54}{figure.caption.57}%
\contentsline {figure}{\numberline {3.17}{\ignorespaces Comparison of grid search, random search, bayesian optimization and sparse grid search. The number of epochs, batch size, and learning rate are optimized as well as the number of layers and number of neurons per layer. \relax }}{55}{figure.caption.58}%
\contentsline {figure}{\numberline {3.18}{\ignorespaces Hyperparameter optimization of a convolutional neural network on the MNIST dataset with different algorithms. The hyperparameter intervals are presented in Table \ref {tab:hyperparameter_space_mnist}. \relax }}{57}{figure.caption.60}%
\contentsline {figure}{\numberline {3.19}{\ignorespaces Resulting accuracy with increasing budget for the grid search, random search, bayesian optimization and sparse grid optimization. The MNIST dataset and a small convolutional neural network were used. \relax }}{59}{figure.caption.63}%
\contentsline {figure}{\numberline {3.20}{\ignorespaces Example for the interval based refinement strategy. The point being refined is indicated with the blue cross and the lines show the upper and lower boundary in each direction. The sampling is done uniformly in the blue area. \relax }}{63}{figure.caption.67}%
\contentsline {figure}{\numberline {3.21}{\ignorespaces Example for the uniform d-ball sampling strategy. The point being refined is indicated with the blue cross and the circle is the area where the uniform sampling is done. \relax }}{64}{figure.caption.70}%
\contentsline {figure}{\numberline {3.22}{\ignorespaces Example for the normal distribution sampling strategy. The point being refined is indicated with the blue cross and contour represents the likelihood of samples. \relax }}{65}{figure.caption.73}%
\contentsline {figure}{\numberline {3.23}{\ignorespaces Generated points for optimizing the Rosenbrock function with interval based refinement strategy (\ref {fig:alt0_adapt_param}), uniform d-ball sampling strategy (\ref {fig:alt1_adapt_param}), and normal distribution sampling strategy (\ref {fig:alt2_adapt_param}). In each case, the left one has adaptivity parameter $ \gamma = 1.0 $ which distributes the points most homogeneous. In the center with $ \gamma = 0.75 $, they are concentrated on few areas and in each right case where $ \gamma = 0.0 $, the grid is most adaptive and almost all points are in the same region. \relax }}{68}{figure.caption.76}%
\contentsline {figure}{\numberline {3.24}{\ignorespaces Error of the found optimum by the different refinement strategies for the Rosenbrock (2d) and the Rastrigin (2d and 10d) functions. For the two-dimensional case, the budget is 200 and for the 10-d optimization the budget is set to 5000. \relax }}{70}{figure.caption.78}%
\contentsline {figure}{\numberline {3.25}{\ignorespaces Error of the optimum found by the algorithm depending on the number of initial points. The budget is 200 in all two dimensional cases and 400 in the 4- and 6-dimensional problem. Each point is the average of 10 evaluations. \relax }}{72}{figure.caption.81}%
\contentsline {figure}{\numberline {3.26}{\ignorespaces Error of the optimum found by the algorithm depending on the number of points added per refinement step. The budget is 200 in all two dimensional cases and 400 in the 4- and 6-dimensional problems. Each point is the average of 10 evaluations. \relax }}{75}{figure.caption.84}%
\contentsline {figure}{\numberline {3.27}{\ignorespaces \relax }}{77}{figure.caption.85}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\providecommand \tocbasic@end@toc@file {}\tocbasic@end@toc@file 
